#include "imports/stdlib.fc";
#include "imports/utils.fc";
#include "imports/op-codes.fc";

global int total_supply;
global slice admin;
global slice tgbtc_jetton_wallet;
global cell content;
global cell jetton_wallet_code;

() load_data() impure inline_ref {
    slice ds = get_data().begin_parse();

    total_supply = ds~load_coins();
    admin = ds~load_msg_addr();
    tgbtc_jetton_wallet = ds~load_msg_addr();
    content = ds~load_ref();
    jetton_wallet_code = ds~load_ref();

    ds.end_parse();

}

() save_data() impure inline_ref {
    set_data(
        begin_cell()
        .store_coins(total_supply)
        .store_slice(admin)
        .store_slice(tgbtc_jetton_wallet)
        .store_ref(content)
        .store_ref(jetton_wallet_code)
        .end_cell()
    );
}

() mint_tokens(slice to_address, cell jetton_wallet_code, int amount, cell master_msg) impure inline {
    cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);
    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_wallet_address)
        .store_coins(amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(master_msg)
        .end_cell();
    send_raw_message(msg, SEND_MODE_PAY_FEES_SEPARATELY);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
  
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_data();

    if (op == op::transfer_notification) {
        int jetton_amount = in_msg_body~load_coins();
        slice owner = in_msg_body~load_msg_addr();

        throw_unless(error::unknown_sender, equal_slices_bits(sender_address, tgbtc_jetton_wallet));

        int either_forward_payload = in_msg_body~load_bool();
        slice forward_payload = either_forward_payload ? in_msg_body~load_ref().begin_parse() : in_msg_body;

        cell master_msg = begin_cell()
            .store_uint(op::internal_transfer, 32)
            .store_uint(query_id, 64)
            .store_coins(jetton_amount)
            .store_slice(owner)
            .store_slice(owner)
            .store_coins(3000000)
            .store_slice(forward_payload)
            .end_cell();

        mint_tokens(owner, jetton_wallet_code, 10500000, master_msg); ;; 0.0135 ton

        total_supply += jetton_amount;

        save_data();

        return ();
    }

    if (op == op::burn_notification) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        int profit = in_msg_body~load_coins();
        
        slice jetton_wallet = calculate_user_jetton_wallet_address(from_address, my_address(), jetton_wallet_code);

        throw_unless(error::not_child, equal_slices_bits(jetton_wallet, sender_address));

        total_supply -= jetton_amount;

        save_data();

        cell msg_body = begin_cell()
            .store_uint(op::transfer, 32)
            .store_uint(query_id, 64)
            .store_coins(jetton_amount)
            .store_slice(from_address)
            .store_slice(from_address)
            .store_uint(0, 1)
            .store_coins(1)
            .store_uint(0, 1)
            .end_cell();
        cell msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(tgbtc_jetton_wallet)
            .store_coins(50000000)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(msg_body)
            .end_cell();
        send_raw_message(msg, SEND_MODE_REGULAR);

        slice response_address = in_msg_body~load_msg_addr();
        if (response_address.preload_uint(2) != 0) {
            cell msg = begin_cell()
                .store_uint(0x10, 6)
                .store_slice(response_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op::excesses, 32)
                .store_uint(query_id, 64)
                .end_cell();
            send_raw_message(msg, SEND_MODE_IGNORE_ERRORS + SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
        }
        return ();
    }

    if (op == op::change_admin) {
        throw_unless(error::not_admin, equal_slices_bits(sender_address, admin));
        slice new_admin = in_msg_body~load_msg_addr();
        in_msg_body.end_parse();
        admin = new_admin;
        save_data();
        return ();
    }

    if (op == op::change_content) {
        throw_unless(error::not_admin, equal_slices_bits(sender_address, admin));
        cell new_content = in_msg_body~load_ref();
        in_msg_body.end_parse();
        content = new_content;
        save_data();
        return ();
    }

    if (op == op::change_tgbtc_jetton_wallet) {
        throw_unless(error::not_admin, equal_slices_bits(sender_address, admin));
        slice new_tgbtc_jetton_wallet = in_msg_body~load_msg_addr();
        in_msg_body.end_parse();
        tgbtc_jetton_wallet = new_tgbtc_jetton_wallet;
        save_data();
        return ();
    }

    if (op == op::upgrade_contract) {
        throw_unless(error::not_admin, equal_slices_bits(sender_address, admin));
        (cell new_data, cell new_code) = (in_msg_body~load_ref(), in_msg_body~load_ref());
        in_msg_body.end_parse();
        set_data(new_data);
        set_code(new_code);
        return ();
    }

    throw(error::unknown_op_code);
}

(int, slice, cell, cell) get_jetton_data() method_id {
    load_data();
    return (total_supply, admin, content, jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    load_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}
